# Task ID: 5
# Title: Implement structured data scanning (JSON, CSV)
# Status: pending
# Dependencies: 4
# Priority: medium
# Description: Extend the CLI to scan structured data formats like JSON and CSV for PHI
# Details:
Implement parsers for JSON and CSV formats. Create path-based scanning for JSON documents (e.g., using JSONPath). Develop column-aware scanning for CSV files. Add configuration options for specifying which fields/columns to scan or ignore. Implement smart detection of FHIR resources and fields. Support scanning of nested structures. Preserve structure in redacted output files.

# Test Strategy:
Test with sample healthcare data in JSON and CSV formats. Verify correct handling of nested structures. Test with malformed input files to ensure robust error handling.

# Subtasks:
## 1. Implement basic JSON and CSV parsers [pending]
### Dependencies: None
### Description: Create parsers for JSON and CSV formats that can load files and provide access to their content for scanning
### Details:
Implement parser classes for JSON and CSV files using standard libraries (e.g., Python's json and csv modules). The parsers should handle file loading, basic validation, and provide a consistent interface for accessing the parsed data. Include error handling for malformed files and large file support through streaming/chunking where appropriate. The implementation should return the parsed data in a format that can be easily traversed for PHI scanning in subsequent steps.

## 2. Develop path-based scanning for JSON documents [pending]
### Dependencies: 5.1
### Description: Create a mechanism to scan JSON documents using path expressions to target specific fields
### Details:
Implement JSONPath or similar path-based query functionality to navigate JSON structures. Create a scanner that can traverse JSON documents and apply PHI detection to specific paths. The implementation should support wildcards and recursive descent to handle varying document structures. Include functionality to extract values at specified paths for PHI scanning while maintaining references to their original locations in the document structure.

## 3. Implement column-aware scanning for CSV files [pending]
### Dependencies: 5.1
### Description: Create a scanner that understands CSV column structure and can selectively scan specific columns
### Details:
Extend the CSV parser to be column-aware, allowing scanning to target specific columns by name or index. Implement handling for CSV files both with and without headers. Create configuration options to specify which columns should be scanned or ignored. The scanner should process each row while maintaining column context, allowing for targeted PHI detection and redaction that preserves the tabular structure of the data.

## 4. Add configuration options for field/column selection and FHIR detection [pending]
### Dependencies: 5.2, 5.3
### Description: Implement configuration mechanisms to specify which fields or columns to scan and add smart detection for FHIR resources
### Details:
Create a configuration system that allows users to specify inclusion/exclusion patterns for JSON paths and CSV columns. Implement FHIR resource detection to automatically identify common PHI-containing fields in FHIR resources (like Patient, Practitioner, etc.). The configuration should support both command-line arguments and configuration files. Include validation logic to ensure configurations are valid and provide helpful error messages for misconfiguration.

## 5. Implement structure-preserving redaction for JSON and CSV [pending]
### Dependencies: 5.2, 5.3, 5.4
### Description: Create functionality to redact PHI while preserving the original structure of JSON and CSV files
### Details:
Develop redaction mechanisms that replace PHI with appropriate placeholders while maintaining the original JSON or CSV structure. For JSON, ensure nested structures are preserved after redaction. For CSV, maintain column alignment and row structure. Implement options for different redaction styles (e.g., complete removal, replacement with fixed strings, or replacement with type-appropriate placeholders). Add functionality to write the redacted data back to files in the original format with preserved structure.

