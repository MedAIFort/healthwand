# Task ID: 1
# Title: Set up Rust CLI foundation with basic PHI detection
# Status: in-progress
# Dependencies: None
# Priority: high
# Description: Create the core Rust CLI application with basic pattern matching for common PHI types (SSNs, Medical IDs, etc.)
# Details:
Initialize a new Rust project with Cargo. Implement command-line argument parsing using clap or structopt. Create pattern matchers for basic PHI types (SSNs, Medical IDs, ICD-10 codes) using regex. Implement file traversal to scan text files. Design a simple JSON output format for detection results. Include basic redaction functionality that replaces detected PHI with placeholders (e.g., 'XXX-XX-XXXX' for SSNs). Ensure proper error handling and logging.

# Test Strategy:
Write unit tests for each pattern matcher. Create integration tests with sample files containing mock PHI data. Measure performance on large files to establish baseline metrics.

# Subtasks:
## 1. Initialize Rust project and implement CLI argument parsing [pending]
### Dependencies: None
### Description: Set up the initial Rust project structure and implement command-line argument parsing
### Details:
Create a new Rust project using `cargo new phi-detector --bin`. Set up the project structure with appropriate modules. Implement CLI argument parsing using clap (v3+) with the following options: input file/directory path, output format options, redaction toggle, and verbosity level. Create a configuration struct to hold parsed arguments. Write unit tests for argument parsing. Update Cargo.toml with necessary dependencies including clap with derive features.

## 2. Implement file traversal and reading functionality [pending]
### Dependencies: 1.1
### Description: Create modules to traverse directories and read file contents for scanning
### Details:
Create a file handling module that can: recursively traverse directories if specified, filter for text-based files (.txt, .md, .csv, etc.), read file contents efficiently (using buffered reading for large files), and handle file system errors gracefully. Implement a FileSource trait/interface that can be extended later for different input sources. Add proper error types and propagation. Write unit tests for file traversal and reading functionality using test fixtures.

## 3. Develop regex patterns for basic PHI detection [pending]
### Dependencies: 1.1
### Description: Create a pattern matching module with regex definitions for common PHI types
### Details:
Create a dedicated module for PHI pattern definitions. Implement regex patterns for: SSNs (format: XXX-XX-XXXX), Medical Record Numbers (various formats), ICD-10 codes (letter followed by 2 digits, optional decimal and more digits), and basic date of birth patterns. Use the regex crate with compiled regex patterns for performance. Create a PHIType enum to categorize different types of detected PHI. Implement unit tests for each pattern with both matching and non-matching examples.

## 4. Implement PHI scanning and detection engine [pending]
### Dependencies: 1.2, 1.3
### Description: Create the core scanning logic that applies regex patterns to file contents
### Details:
Develop a Scanner struct that takes file content and applies all PHI detection patterns. For each match, record the match text, position, PHI type, and confidence level. Implement context extraction to capture surrounding text for verification. Create a Detection struct to hold match details. Optimize for performance by using appropriate regex options and processing strategies. Add unit and integration tests with sample text containing various PHI patterns.

## 5. Implement redaction functionality [pending]
### Dependencies: 1.4
### Description: Create a module to redact or mask detected PHI in the original text
### Details:
Implement a Redactor struct that takes Detection objects and original text to produce redacted output. Create different redaction strategies: full replacement (e.g., 'XXX-XX-XXXX' for SSNs), partial masking (e.g., showing only last 4 digits), and placeholder substitution (e.g., '[REDACTED-SSN]'). Ensure redaction preserves text layout and length where appropriate. Handle overlapping matches correctly. Add configuration options to control redaction behavior. Write tests to verify redaction correctness with various PHI types.

## 6. Implement results output formatting and logging [pending]
### Dependencies: 1.4, 1.5
### Description: Create output formatting for detection results and add proper error handling and logging
### Details:
Design and implement a JSON output format for detection results including file path, PHI type, location, and context. Add an optional redacted content field in the output. Implement pretty-printing for console output. Add structured logging using the log crate with different verbosity levels. Implement proper error handling throughout the application with custom error types and helpful error messages. Create a results summary with statistics. Write integration tests that verify the entire pipeline from input to output. Add documentation for the output format.

