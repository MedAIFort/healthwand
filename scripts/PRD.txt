<context>
# Overview  
HealthWand is an open-source framework for detecting, redacting, masking, and anonymizing sensitive healthcare data (Protected Health Information, PHI) across text, images, and structured data. It is designed for healthcare developers and organizations who must ensure compliance with HIPAA, GDPR, and HITRUST by identifying and protecting PHI such as SSNs, Medical IDs, ICD-10 codes, drug names, and patient information. HealthWand provides high-performance pattern matching (Rust), context-aware NLP (Python), and seamless integration into CI/CD pipelines to empower secure healthcare software development.

# Core Features  
- PHI Detection: Identifies sensitive data (e.g., SSNs, ICD-10 codes, FHIR fields, drug names) in code, commits, images (via OCR), and structured data (JSON, CSV).
- Redaction and Anonymization: Masks or redacts PHI to prevent data leaks (e.g., "123-45-6789" â†’ "XXX-XX-XXXX").
- Customizable Pipelines: Users can define custom PHI patterns and detection rules via YAML configuration.
- Context-Aware NLP: Reduces false positives by using NLP to distinguish real PHI from similar-looking data.
- GitHub Actions Integration: Automates PHI scanning in CI/CD pipelines.
- High Performance: Rust core ensures fast scanning of large codebases, Python enhances NLP accuracy.
- Compliance-Ready: Supports audit trails and reporting for healthcare regulations.
- Extensible: Modular architecture for adding new detection methods, including future AI capabilities.

# User Experience  
User Personas:
- Healthcare software engineers integrating PHI detection into their CI/CD pipeline.
- Compliance officers running audits on code and data.
- Platform integrators deploying PHI detection as an API service.

Key User Flows:
- Install HealthWand CLI and Python NLP dependencies.
- Scan codebases or data files for PHI using CLI or API.
- Integrate PHI scanning into GitHub Actions workflows.
- Customize detection patterns via YAML config.
- Review and act on PHI scan reports.

UI/UX Considerations:
- Simple CLI commands and clear output.
- API returns structured JSON for easy integration.
- GitHub Action provides workflow status and downloadable reports.
</context>
<PRD>
# Technical Architecture  
- System Components:
  - Rust CLI for high-speed PHI detection
  - Python NLP module for context-aware validation
  - YAML config for patterns and NLP settings
  - Optional API server (Python FastAPI/Uvicorn)
  - GitHub Action wrapper for CI/CD integration
- Data Models:
  - PHI pattern definitions (YAML)
  - Detection results (JSON)
- APIs and Integrations:
  - CLI commands
  - REST API endpoints (for API server)
  - GitHub Actions interface
- Infrastructure Requirements:
  - Rust toolchain (>=1.65)
  - Python 3.9+
  - Docker (optional for deployment)

# Development Roadmap  
- Phase 1 (v1.0):
  - Core PHI detection (SSNs, ICD-10, FHIR fields)
  - YAML-based config
  - CLI and Python NLP integration
  - GitHub Action for CI/CD
  - Basic API server
- Phase 2 (v2.0):
  - Image processing (OCR for scanned records)
  - Advanced NLP for context-aware detection
  - Compliance reporting for HIPAA/GDPR
- Phase 3 (v3.0):
  - Machine learning-based PHI detection
  - Enterprise integrations (EHR platforms)
  - HITRUST certification support

# Logical Dependency Chain
- Foundation: Rust CLI and YAML config
- Add Python NLP validation
- Integrate with GitHub Actions for CI/CD
- Build API server for real-time detection
- Extend to image/OCR and advanced NLP
- Add compliance reporting and enterprise features

# Risks and Mitigations  
- Technical challenges: Ensuring high accuracy with low false positives (mitigated by combining regex and NLP)
- MVP scoping: Start with core PHI types and CLI, expand iteratively
- Resource constraints: Modular design allows incremental development and community contributions

# Appendix  
- Research findings: NLP models (e.g., en_core_sci_sm), PHI pattern libraries, best practices for healthcare compliance
- Technical specifications: See README for CLI/API usage, config structure, and integration examples
</PRD>
