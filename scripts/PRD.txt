<context>
# Overview  
HealthWand is an open-source toolkit for detecting, redacting, masking, and anonymizing sensitive healthcare data (PHI) across text and structured data today, with OCR and NLP planned. It helps teams meet HIPAA, GDPR, and HITRUST requirements by identifying PHI such as SSNs, MRNs, ICD-10 codes, drug names, and regional IDs (e.g., Indonesia’s NIK/BPJS). The current deliverable is a fast Rust CLI (`phi-detector`) with configurable patterns; Python NLP validation and an API server are planned.

# Core Features  
- PHI Detection (CLI): Identifies sensitive data (e.g., SSNs, ICD-10 codes, FHIR fields, drug names) in code/docs and structured data (JSON, CSV). OCR for images is planned.
- Redaction and Anonymization: Masks or redacts PHI to prevent data leaks (e.g., "123-45-6789" → "XXX-XX-XXXX").
- Customizable Pipelines: Users can define custom PHI patterns and detection rules via YAML configuration (library support now; CLI flag planned).
- Context-Aware NLP (planned): Reduce false positives using NLP to distinguish real PHI from similar-looking data.
- GitHub Actions Integration: Automates PHI scanning in CI/CD pipelines.
- High Performance: Rust core ensures fast scanning of large codebases, Python enhances NLP accuracy.
- Compliance-Ready: Supports audit trails and reporting for healthcare regulations.
- Extensible: Modular architecture for adding new detection methods, including future AI capabilities.
- Regional Support (Indonesia): Patterns for KTP/NIK (16-digit) and BPJS (13-digit).

# User Experience  
User Personas:
- Healthcare software engineers integrating PHI detection into their CI/CD pipeline.
- Compliance officers running audits on code and data.
- Platform integrators deploying PHI detection as an API service.

Key User Flows:
- Install Rust CLI (`phi-detector`).
- Scan codebases or data files for PHI using the CLI.
- Integrate PHI scanning into GitHub Actions workflows.
- Customize detection patterns via YAML config (CLI flag planned; library supports YAML today).
- Review and act on PHI scan reports.

UI/UX Considerations:
- Simple CLI commands and clear output.
- API returns structured JSON for easy integration.
- GitHub Action provides workflow status and downloadable reports.
</context>
<PRD>
# Technical Architecture  
- System Components:
  - Rust CLI (`phi-detector`) for high-speed PHI detection
  - YAML config for patterns (library supported; CLI flag planned)
  - Python NLP validator (planned)
  - API server (planned; Python FastAPI/Uvicorn)
  - GitHub Action wrapper for CI/CD integration
- Data Models:
  - PHI pattern definitions (YAML; see `phi-detector/config/phi_patterns.yaml`)
  - Detection results (JSON; see `phi-detector/docs/output_format.md`)
- APIs and Integrations:
  - CLI commands (`phi-detector --input ... --output [json|text]`)
  - REST API endpoints (planned, for API server)
  - GitHub Actions interface (example workflow in README)
- Infrastructure Requirements:
  - Rust toolchain (>=1.65)
  - Python 3.9+ (optional; for planned NLP/API)
  - Docker (optional for deployment)

# Development Roadmap  
- Phase 1 (v1.0):
  - Core PHI detection in text and structured data
  - GitHub Action for CI/CD (example workflow provided)
  - Initial API server (planned) for platform integration
- Phase 2 (v2.0):
  - Image processing (OCR for scanned records)
  - Advanced NLP for context-aware detection
  - Compliance reporting for HIPAA/GDPR
- Phase 3 (v3.0):
  - Machine learning-based PHI detection
  - Enterprise integrations (EHR platforms)
  - HITRUST certification support

# Logical Dependency Chain
- Foundation: Rust CLI and YAML patterns (library already supports YAML; add CLI flag)
- CI: Integrate with GitHub Actions for CI/CD
- Accuracy: Add Python NLP validation (planned)
- Platform: Build API server for real-time detection (planned)
- Media: Extend to OCR (planned)
- Reporting: Add compliance reporting and enterprise features

# Risks and Mitigations  
- Technical challenges: Ensuring high accuracy with low false positives (mitigated by combining regex and NLP)
- MVP scoping: Start with core PHI types and CLI, expand iteratively
- Resource constraints: Modular design allows incremental development and community contributions

# Appendix  
- Research findings: PHI pattern libraries and healthcare compliance best practices
- Technical specifications and references:
  - README: project scope, usage, CI workflow
  - CLI output schema: `phi-detector/docs/output_format.md`
  - YAML patterns example: `phi-detector/config/phi_patterns.yaml`
  - Default scanned extensions: `.txt`, `.md`, `.csv`
</PRD>
